---
layout: guide
title: Search API - Terms Facet
cat: guide
sidebar: reference_api_search_facets
---

p. Allow to specify field facets that return the N most frequent terms. For example:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "size" : 10
            }
        }
    }
}
</pre>

p(note). It is preferred to have the terms facet executed on a non analyzed field, or a field without a large number of terms it breaks to.

h1. Ordering

p. Allow to control the ordering of the terms facets, to be ordered by @count@, @term@, @reverse_count@ or @reverse_term@. The default is @count@. Here is an example:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "size" : 10,
                "order" : "term"
            }
        }
    }
}
</pre>

h1. All Terms

p. Allow to get all the terms in the terms facet, ones that do not match a hit, will have a count of 0. Note, this should not be used with fields that have many terms.

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "all_terms" : true
            }
        }
    }
}
</pre>

h1. Excluding Terms

p. It is possible to specify a set of terms that should be excluded from the terms facet request result:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : { }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "exclude" : ["term1", "term2"]
            }
        }
    }
}
</pre>

h1. Regex Patterns

p. The terms API allows to define regex expression that will control which terms will be included in the faceted list, here is an example:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : { }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "regex" : "_regex expression here_"
                "regex_flags" : "DOTALL"
            }
        }
    }
}
</pre>

p. Check "Java Pattern API":http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html#field_summary for more details about @regex_flags@ options.

h1. Term Scripts

p. Allow to define a script for terms facet to process the actual term that will be used in the term facet collection, and also optionally control its inclusion or not.

p. The script can either return a boolean value, with @true@ to include it in the facet collection, and @false@ to exclude it from the facet collection.

p. Another option is for the script to return a @string@ controlling the term that will be used to count against. The script execution will include the term variable which is the current field term used.

p. For example:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "size" : 10,
                "script" : "term + 'aaa'"
            }
        }
    }
}
</pre>

p. And using the boolean feature:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "field" : "tag",
                "size" : 10,
                "script" : "term == 'aaa' ? true : false"
            }
        }
    }
}
</pre>

h1. Multi Fields

p. The term facet can be executed against more than one field, returning the aggregation result across those fields. For example:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "tag" : {
            "terms" : {
                "fields" : ["tag1", "tag2"],
                "size" : 10
            }
        }
    }
}
</pre>

h1. Script Field

p. A script that provides the actual terms that will be processed for a given doc. A @script_field@ (or @script@ which will be used when no @field@ or @fields@ are provided) can be set to provide it.

p. As an example, a search request (that is quite "heavy") can be executed and use either @_source@ itself or @_fields@ (for stored fields) without needing to load the terms to memory (at the expense of much slower execution of the search, and causing more IO load):

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "my_facet" : {
            "terms" : {
                "script_field" : "_source.my_field",
                "size" : 10
            },
        }
    }
}
</pre>

p. Or:

<pre class="prettyprint lang-js">
{
    "query" : {
        "match_all" : {  }
    },
    "facets" : {
        "my_facet" : {
            "terms" : {
                "script_field" : "_fields['my_field']",
                "size" : 10
            },
        }
    }
}
</pre>

p. Note also, that the above will use the whole field value as a single term.

h1. _index

p. The term facet allows to specify a special field name called @_index@. This will return a facet count of hits per @_index@ the search was executed on (relevant when a search request spans more than one index).

h1. Memory Considerations

p. Term facet causes the relevant field values to be loaded into memory. This means that per shard, there should be enough memory to contain them. It is advisable to explicitly set the fields to be @not_analyzed@ or make sure the number of unique tokens a field can have is not large.

h1. Formal Description

|_. Node | @terms@ |
|_. Description | A facet on a field that holds a few terms |

|_. Child |_. Description |_. Type |_. Required (cardinality) |
| @field@ | The field to use to extract terms from | _string_ | No (0..1) |
| @size@ | The maximum number of most frequent terms to return | _int_ | No (0..1). Default is XX. |
| @order@ | Allow to control the ordering of the terms facets | one of @"count"@, @"term"@, @"reverse_count"@, @"reverse_term"@ | No (0..1). The default is @"count"@ |
| @all_terms@ | Forces to return counts for all terms as opposed to only the ones with hits. | _boolean_ | No (0..1). Default is @false@ |
| @exclude@ | Excludes certain terms from the result. | _array_ of _string_ | No (0..1). Default will exclude nothing |
| @regex@ | A regular expression used to test potential terms. Only matching terms are returned. | _string_ (regex, see "Java Pattern API":http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html) | No (0..1). All terms match by default |
| @regex_flags@ | Flags to a @regex@ attribute | _string_ (see "Java Pattern API":http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html#field_summary) | No (0..1) |
| @script@ | A script to determine whether a term should be included or not (returns a _boolean_). Alternatively the script can return the term's name (returns a _string_) | _string_ | No (0..1) |
| @fields@ | A list of fields to use to extract terms from.  | _array_ of _string_ | No (0..1) |
| @script_field@ | ? | _string_ | No (0..1) |

One of @field@, @fields@ or @script_field@ should be specified.